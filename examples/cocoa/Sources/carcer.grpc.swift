/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: carcer.proto
 *
 */

/*
 * Copyright 2018, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC
import SwiftProtobuf

/// Type for errors thrown from generated client code.
internal enum Carcer_Proto_CarcerClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// setup (Unary)
internal class Carcer_Proto_CarcersetupCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/carcer_proto.Carcer/setup")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: CarcerProto_BrainRequest,
                       metadata: Metadata) throws -> CarcerProto_ServiceResponse {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : CarcerProto_ServiceResponse?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Carcer_Proto_CarcerClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: CarcerProto_BrainRequest,
                         metadata: Metadata,
                         completion: @escaping (CarcerProto_ServiceResponse?, CallResult)->())
    throws -> Carcer_Proto_CarcersetupCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? CarcerProto_ServiceResponse(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// createSocket (Bidirectional Streaming)
internal class Carcer_Proto_CarcercreateSocketCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/carcer_proto.Carcer/createSocket")
  }

  /// Call this to start a call. Nonblocking.
  fileprivate func start(metadata:Metadata, completion:@escaping (CallResult)->())
    throws -> Carcer_Proto_CarcercreateSocketCall {
      try self.call.start(.bidiStreaming, metadata:metadata, completion:completion)
      return self
  }

  /// Call this to wait for a result. Blocking.
  internal func receive() throws -> CarcerProto_ServiceMessage {
    var returnError : Carcer_Proto_CarcerClientError?
    var returnMessage : CarcerProto_ServiceMessage!
    let sem = DispatchSemaphore(value: 0)
    do {
      try receive() {response, error in
        returnMessage = response
        returnError = error
        sem.signal()
      }
      _ = sem.wait(timeout: DispatchTime.distantFuture)
    }
    if let returnError = returnError {
      throw returnError
    }
    return returnMessage
  }

  /// Call this to wait for a result. Nonblocking.
  internal func receive(completion:@escaping (CarcerProto_ServiceMessage?, Carcer_Proto_CarcerClientError?)->()) throws {
    do {
      try call.receiveMessage() {(data) in
        if let data = data {
          if let returnMessage = try? CarcerProto_ServiceMessage(serializedData:data) {
            completion(returnMessage, nil)
          } else {
            completion(nil, Carcer_Proto_CarcerClientError.invalidMessageReceived)
          }
        } else {
          completion(nil, Carcer_Proto_CarcerClientError.endOfStream)
        }
      }
    }
  }

  /// Call this to send each message in the request stream.
  internal func send(_ message:CarcerProto_BrainMessage, errorHandler:@escaping (Error)->()) throws {
    let messageData = try message.serializedData()
    try call.sendMessage(data:messageData, errorHandler:errorHandler)
  }

  /// Call this to close the sending connection. Blocking.
  internal func closeSend() throws {
    let sem = DispatchSemaphore(value: 0)
    try closeSend() {
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
  }

  /// Call this to close the sending connection. Nonblocking.
  internal func closeSend(completion:@escaping ()->()) throws {
    try call.close() {
      completion()
    }
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// Call methods of this class to make API calls.
internal class Carcer_Proto_CarcerService {
  public var channel: Channel

  /// This metadata will be sent with all requests.
  internal var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  internal var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client.
  internal init(address: String, secure: Bool = true) {
    gRPC.initialize()
    channel = Channel(address:address, secure:secure)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections with a custom certificate and (optional) hostname.
  internal init(address: String, certificates: String, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Synchronous. Unary.
  internal func setup(_ request: CarcerProto_BrainRequest)
    throws
    -> CarcerProto_ServiceResponse {
      return try Carcer_Proto_CarcersetupCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func setup(_ request: CarcerProto_BrainRequest,
                  completion: @escaping (CarcerProto_ServiceResponse?, CallResult)->())
    throws
    -> Carcer_Proto_CarcersetupCall {
      return try Carcer_Proto_CarcersetupCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  internal func createsocket(completion: @escaping (CallResult)->())
    throws
    -> Carcer_Proto_CarcercreateSocketCall {
      return try Carcer_Proto_CarcercreateSocketCall(channel).start(metadata:metadata, completion:completion)
  }
}

/// Type for errors thrown from generated server code.
internal enum Carcer_Proto_CarcerServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Carcer_Proto_CarcerProvider {
  func setup(request : CarcerProto_BrainRequest, session : Carcer_Proto_CarcersetupSession) throws -> CarcerProto_ServiceResponse
  func createsocket(session : Carcer_Proto_CarcercreateSocketSession) throws
}

/// Common properties available in each service session.
internal class Carcer_Proto_CarcerSession {
  fileprivate var handler : gRPC.Handler
  internal var requestMetadata : Metadata { return handler.requestMetadata }

  internal var statusCode : StatusCode = .ok
  internal var statusMessage : String = "OK"
  internal var initialMetadata : Metadata = Metadata()
  internal var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// setup (Unary)
internal class Carcer_Proto_CarcersetupSession : Carcer_Proto_CarcerSession {
  private var provider : Carcer_Proto_CarcerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Carcer_Proto_CarcerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try CarcerProto_BrainRequest(serializedData:requestData)
        let replyMessage = try self.provider.setup(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// createSocket (Bidirectional Streaming)
internal class Carcer_Proto_CarcercreateSocketSession : Carcer_Proto_CarcerSession {
  private var provider : Carcer_Proto_CarcerProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Carcer_Proto_CarcerProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  internal func receive() throws -> CarcerProto_BrainMessage {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : CarcerProto_BrainMessage?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        do {
          requestMessage = try CarcerProto_BrainMessage(serializedData:requestData)
        } catch (let error) {
          print("error \(error)")
        }
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let requestMessage = requestMessage {
      return requestMessage
    } else {
      throw Carcer_Proto_CarcerServerError.endOfStream
    }
  }

  /// Send a message. Nonblocking.
  internal func send(_ response: CarcerProto_ServiceMessage, completion: @escaping ()->()) throws {
    try handler.sendResponse(message:response.serializedData()) {completion()}
  }

  /// Close a connection. Blocks until the connection is closed.
  internal func close() throws {
    let sem = DispatchSemaphore(value: 0)
    try self.handler.sendStatus(statusCode:self.statusCode,
                                statusMessage:self.statusMessage,
                                trailingMetadata:self.trailingMetadata) {
                                  sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.createsocket(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}


/// Main server for generated service
internal class Carcer_Proto_CarcerServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Carcer_Proto_CarcerProvider?

  /// Create a server that accepts insecure connections.
  internal init(address:String,
              provider:Carcer_Proto_CarcerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  internal init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Carcer_Proto_CarcerProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  internal func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      fatalError() // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/carcer_proto.Carcer/setup":
          try Carcer_Proto_CarcersetupSession(handler:handler, provider:provider).run(queue:queue)
        case "/carcer_proto.Carcer/createSocket":
          try Carcer_Proto_CarcercreateSocketSession(handler:handler, provider:provider).run(queue:queue)
        default:
          // handle unknown requests
          try handler.receiveMessage(initialMetadata:Metadata()) {(requestData) in
            try handler.sendResponse(statusCode:.unimplemented,
                                     statusMessage:"unknown method " + handler.method,
                                     trailingMetadata:Metadata())
          }
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}

